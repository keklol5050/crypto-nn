package com.crypto.analysis.main.fundamental.stock;import com.crypto.analysis.main.data_utils.select.StaticData;import com.crypto.analysis.main.data_utils.select.fundamental.FundamentalStock;import com.crypto.analysis.main.vo.CandleObject;import com.crypto.analysis.main.vo.FundamentalStockObject;import com.fasterxml.jackson.databind.JsonNode;import lombok.Getter;import okhttp3.Request;import okhttp3.Response;import java.io.IOException;import java.text.ParseException;import java.util.Date;import java.util.TreeMap;import static com.crypto.analysis.main.data_utils.select.StaticData.objectMapper;import static com.crypto.analysis.main.data_utils.select.StaticData.sdfFullISO;@Getterpublic class FundamentalDataUtil {    private TreeMap<Date, Double> SPX;    private TreeMap<Date, Double> DXY;    private TreeMap<Date, Double> DJI;    private TreeMap<Date, Double> VIX;    private TreeMap<Date, Double> NDX;    private TreeMap<Date, Double> GOLD;    public FundamentalDataUtil() {        init();    }    public static TreeMap<Date, Double> getData(FundamentalStock symbol) {        String url = String.format("https://api.twelvedata.com/time_series?symbol=%s&timezone=UTC&outputsize=%s&interval=%s&apikey=%s",                symbol.getName(), 5000, "15min", StaticData.twelveDataKey);        Request request = new Request.Builder()                .url(url)                .build();        TreeMap<Date, Double> result = new TreeMap<>();        try {            Response response = StaticData.okHttpClient.newCall(request).execute();            if (response.isSuccessful()) {                assert response.body() != null;                String jsonData = response.body().string();                JsonNode root = objectMapper.readTree(jsonData);                JsonNode valuesNode = root.get("values");                for (JsonNode node : valuesNode) {                    Date openTime = sdfFullISO.parse(node.get("datetime").asText());                    double open = node.get("open").asDouble();                    result.put(openTime, open);                }            } else {                System.out.println("Error: " + response.code() + " " + response.message());            }            response.close();        } catch (IOException | ParseException e) {            e.printStackTrace(System.out);        }        return result;    }    public static void main(String[] args) {        TreeMap<Date, Double> result = FundamentalDataUtil.getData(FundamentalStock.SPX);        System.out.println(result);    }    private void init() {        SPX = getData(FundamentalStock.SPX);        DXY = getData(FundamentalStock.DXY);        DJI = getData(FundamentalStock.DJI);        VIX = getData(FundamentalStock.VIX);        NDX = getData(FundamentalStock.NDX);        GOLD = getData(FundamentalStock.GOLD);    }    public FundamentalStockObject getFundamentalData(CandleObject coinCandle) {        FundamentalStockObject result = new FundamentalStockObject();        result.setSPX(SPX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setDXY(DXY.floorEntry(coinCandle.getOpenTime()).getValue());        result.setDJI(DJI.floorEntry(coinCandle.getOpenTime()).getValue());        result.setVIX(VIX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setNDX(NDX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setGOLD(GOLD.floorEntry(coinCandle.getOpenTime()).getValue());        return result;    }}