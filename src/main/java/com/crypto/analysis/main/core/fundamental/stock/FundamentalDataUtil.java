package com.crypto.analysis.main.core.fundamental.stock;import com.crypto.analysis.main.core.data_utils.select.StaticUtils;import com.crypto.analysis.main.core.data_utils.select.fundamental.FundamentalStock;import com.crypto.analysis.main.core.data_utils.utils.PropertiesUtil;import com.crypto.analysis.main.core.vo.CandleObject;import com.crypto.analysis.main.core.vo.FundamentalStockObject;import com.fasterxml.jackson.databind.JsonNode;import lombok.Getter;import okhttp3.Request;import okhttp3.Response;import java.io.IOException;import java.text.ParseException;import java.time.LocalDate;import java.time.ZoneId;import java.util.Date;import java.util.TreeMap;import java.util.concurrent.TimeUnit;import static com.crypto.analysis.main.core.data_utils.select.StaticUtils.*;@Getterpublic class FundamentalDataUtil {    public static final String twelveDataKey = PropertiesUtil.getProperty("twelvedata.key");    public static final String tiingoKey = PropertiesUtil.getProperty("tiingo.key");    private TreeMap<Date, float[]> SPX;    private TreeMap<Date, float[]> DXY;    private TreeMap<Date, float[]> DJI;    private TreeMap<Date, float[]> VIX;    private TreeMap<Date, float[]> NDX;    private TreeMap<Date, float[]> GOLD;    private Date lastUpdate;    public FundamentalDataUtil() {    }    public void init() {        if (lastUpdate != null && TimeUnit.MINUTES.convert((System.currentTimeMillis() - lastUpdate.getTime()), TimeUnit.MILLISECONDS) < 2)            return;        SPX = getData(FundamentalStock.SPX);        DXY = getData(FundamentalStock.DXY);        DJI = getData(FundamentalStock.DJI);        VIX = getData(FundamentalStock.VIX);        NDX = getData(FundamentalStock.NDX);        GOLD = getData(FundamentalStock.GOLD);        lastUpdate = new Date();    }    public static TreeMap<Date, float[]> getData(FundamentalStock symbol) {        if (symbol == FundamentalStock.GOLD)            return getGoldData();        String url = String.format("https://api.twelvedata.com/time_series?symbol=%s&timezone=UTC&outputsize=%s&interval=%s&apikey=%s",                symbol.getName(), 5000, "5min", twelveDataKey);        Request request = new Request.Builder()                .url(url)                .build();        TreeMap<Date, float[]> result = new TreeMap<>();        try {            Response response = StaticUtils.okHttpClient.newCall(request).execute();            if (response.isSuccessful()) {                assert response.body() != null;                String jsonData = response.body().string();                JsonNode root = objectMapper.readTree(jsonData);                JsonNode valuesNode = root.get("values");                for (JsonNode node : valuesNode) {                    Date openTime = sdfFullISO.parse(node.get("datetime").asText());                    float open = (float) node.get("open").asDouble();                    float high = (float) node.get("high").asDouble();                    float low = (float) node.get("low").asDouble();                    float close = (float) node.get("close").asDouble();                    float volume = (float) node.get("volume").asDouble();                    result.put(openTime, new float[]{open, high, low, close, volume});                }            } else {                System.out.println("Error: " + response.code() + " " + response.message());            }            response.close();        } catch (IOException | ParseException e) {            e.printStackTrace(System.out);        }        return result;    }    private static TreeMap<Date, float[]> getGoldData() {        String url = String.format("https://api.tiingo.com/tiingo/fx/%s/prices?startDate=%s&resampleFreq=5min&token=%s",                FundamentalStock.GOLD.getName(), sdfShortISO.format(Date.from(LocalDate.now().minusMonths(3).atStartOfDay(ZoneId.of(defaultZone)).toInstant())), tiingoKey);        Request request = new Request.Builder()                .url(url)                .build();        TreeMap<Date, float[]> result = new TreeMap<>();        try {            Response response = StaticUtils.okHttpClient.newCall(request).execute();            if (response.isSuccessful()) {                assert response.body() != null;                String jsonData = response.body().string();                JsonNode root = objectMapper.readTree(jsonData);                for (JsonNode node : root) {                    Date openTime = sdfFullISO.parse(node.get("date").asText()                            .replace('Z', '\s').replace('T', '\s'));                    float open = (float) node.get("open").asDouble();                    float high = (float) node.get("high").asDouble();                    float low = (float) node.get("low").asDouble();                    float close = (float) node.get("close").asDouble();                    float volume = 0f;                    result.put(openTime, new float[]{open, high, low, close, volume});                }            } else {                System.out.println("Error: " + response.code() + " " + response.message());            }            response.close();        } catch (IOException | ParseException e) {            e.printStackTrace(System.out);        }        return result;    }    public FundamentalStockObject getFundamentalData(CandleObject coinCandle) {        FundamentalStockObject result = new FundamentalStockObject();        result.setSPX(SPX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setDXY(DXY.floorEntry(coinCandle.getOpenTime()).getValue());        result.setDJI(DJI.floorEntry(coinCandle.getOpenTime()).getValue());        result.setVIX(VIX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setNDX(NDX.floorEntry(coinCandle.getOpenTime()).getValue());        result.setGOLD(GOLD.floorEntry(coinCandle.getOpenTime()).getValue());        return result;    }    public static void main(String[] args) {        TreeMap<Date, float[]> result = FundamentalDataUtil.getData(FundamentalStock.GOLD);        System.out.println(result);    }}